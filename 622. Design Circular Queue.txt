class MyCircularQueue {
    int front=-1;
    int rear=-1;
    int maxsize;
    int[] arr;
    public MyCircularQueue(int k) {
        maxsize=k;
        arr= new int[maxsize];
    }
    
    public boolean enQueue(int value) {
            if((rear+1)%maxsize!=front ){
                rear=(rear+1)%maxsize;
                arr[rear]=value;
                if(front==-1)front++;
                return true;
            }
                return false;
    }
    
    public boolean deQueue() {
        if(front==-1){
            return false;
        }
        if(front==rear){
            front=-1;
            rear=-1;
            return true;
        }
        front=(front+1)%maxsize;
        return true;
    }
    
    public int Front() {
        if(front==-1)return -1;
         return arr[front];
    }
    
    public int Rear() {
        if(rear==-1)return -1;
        return arr[rear];
    }
    
    public boolean isEmpty() {
        if(front==-1 && rear==-1)return true;
        return false;
    }
    
    public boolean isFull() {
        if((rear+1)%maxsize==front)return true;
        return false;
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */