/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode t1=l1;
        ListNode t2=l2;
        ListNode ans=null;
        ListNode res=null;

        int carry=0;
        while(t1!=null && t2!=null){
            int sum=t1.val+t2.val+carry;
            carry=sum/10;
            sum=sum%10;
            ListNode newnode=new ListNode(sum);
            if(ans==null){
                ans=newnode;
                res=ans;
            }
            else{
                res.next=newnode;
                res=res.next;
            }
            t1=t1.next;
            t2=t2.next;
        }

        while(t1!=null){
            int sum=t1.val+carry;
            carry=sum/10;
            sum=sum%10;
            ListNode newnode=new ListNode(sum);
            
            res.next=newnode;
            res=res.next;
            t1=t1.next;
        }

        while(t2!=null){
            int sum=t2.val+carry;
            carry=sum/10;
            sum=sum%10;
            ListNode newnode=new ListNode(sum);
           
            res.next=newnode;
            res=res.next;
            t2=t2.next;
        }
        if(carry!=0){
            ListNode newnode= new ListNode(carry);
            res.next=newnode;
            res=res.next;
        }

        return ans;

    }

    ListNode reverse(ListNode temp){
        ListNode prev=null;
        while(temp!=null){
            ListNode front=temp.next;
            temp.next=prev;
            prev=temp;
            temp=front;
        }
        return prev;
    }
}